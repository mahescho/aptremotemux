#!/usr/bin/env python
# -*- coding: utf-8 -*-

# requires tmux 2.3 +

import urllib2
import json
import os
import argparse
import sys
from sys import exit
import libtmux



# parse parameters

parser = argparse.ArgumentParser(description="Automats SSH connections in TMUX windows and panes for APT updates based on the status of the APT check of check_mk.")
parser.add_argument("-l", "--list", dest="l", help="only list commands, do nothing", action="store_true", default=False)
parser.add_argument("-y", "--yes", dest="y", help="use apt with -y for automation", action="store_true", default=False)
parser.add_argument("-A", "--agent", dest="A", help="use ssh with -A for agent forwarding", action="store_true", default=False)
parser.add_argument("-e", "--exit", dest="e", help="auto exit after upgrade if exit code is zero", action="store_true", default=False)
parser.add_argument("-d", "--debug", dest="debug", help="enabel console debug logging", action="store_true", default=False)
parser.add_argument("-p", "--panes", dest="panes", type=int, help="maximum number of panes per window, default: 6", default=6)
parser.add_argument("-c", "--config", dest="config", type=str, help="path to config filei, default: /usr/local/etc/aptremotemux.conf", default="/usr/local/etc/aptremotemux.conf")
parser.add_argument("-C", "--command",dest="command", type=str, help="APT command to use, default: dist-upgrade", default="dist-upgrade")
args = parser.parse_args()

# read config
execfile(args.config,globals(), globals())


if args.debug:
  import logging
  logging.basicConfig(level=logging.DEBUG)


APTAUTO = ' -y' if args.y else ''
SSHAGENT = ' -A' if args.A else ''

# consturct APT command
APT= "apt-get" + APTAUTO + " " + args.command

# add exit if -e flag is set
EXIT = ' && exit' if args.e else ''

PPW = args.panes - 1

# construct URL
URL = MKPROT + "://"+MKHOST + "/" + MKSITE + "/check_mk/view.py?view_name=aptupdates&output_format=json&_username=" + MKUSER + "&_secret=" + MKPASS
logging.debug("URL: " + URL)

# construct TERM
TERM = "export TERM=" + TERM


# read view from check_mk

req = urllib2.Request(URL)
opener = urllib2.build_opener()
f = opener.open(req)
problems = json.loads(f.read())

problems.remove(problems[0])


# generate command list

def checkLD(h):
  # strip domain from loacal hosts as it may differ from WATO
  for l in LOCDOMS:
    if (l in h):
      cmd = "/usr/bin/ssh root@" + h.split('.',1)[0] + " ' " + TERM + ";" + APT + "'" + EXIT
      commands.append(cmd)
      logging.debug(cmd)
      return False
  return True

commands = []
names = []
for i in range(len(problems)):
  h = ""+problems[i][1]
  # ignore hosts in ignore list
  if (h in IGNORE):
    continue;
  # add relay SSH to hosts on remote sites and strip domain as it may differ from WATO
  if (SITES.has_key(problems[i][0])):
    cmd = "/usr/bin/ssh" + SSHAGENT + " root@" + SITES[problems[i][0]] + " \" ssh root@" + h.split('.',1)[0] + " ' " + TERM + ";" + APT + "'\"" + EXIT
    commands.append(cmd)
    logging.debug(cmd)
  else:
    # strip domain from loacal hosts as it may differ from WATO
    if (checkLD(h)):
      cmd = "/usr/bin/ssh root@" + h + " ' " + TERM + ";" + APT + "'" + EXIT
      commands.append(cmd)
      logging.debug(cmd)
  name = problems[i][0]+":"+problems[i][1]
  names.append(name)
  logging.debug("Pane name: " + name)

if len(commands) == 0:
  print("Nothing to do");
  exit(0)

# print commands and exit if -l i set
if args.l:
  for c in commands:
     print(c)

  print("Count: " + str(len(commands)))
  exit(0)

# construct tmux session
numwin = len(commands) // PPW
numwin = numwin + 1 if (len(commands) % PPW > 0 ) else numwin;
logging.debug("Number of Windows: " + str(numwin))

server = libtmux.Server()
session = server.new_session("aptremotemux")

try:
  session.set_option("pane-border-status", "bottom", True)
  session.set_option("pane-border-format", " #P #T ", True)

  # add windows
  window = []
  for w in range(numwin-1):
    window.append(session.new_window(str(w)))
    logging.debug("Created Window # " + str(w))

  wc = 0
  for w in session.list_windows():
    # split panes
    i = 0
    while (i < PPW) and (wc < len(commands)-1):
      w.split_window()
      w.select_layout("tiled")
      wc = wc + 1
      i = i + 1
      logging.debug("Created pan # " + str(i) + "(" + str(wc) + ")")

  # run commands in panes and set pane title
  i = 0
  for w in session.list_windows():
    for p in w.list_panes():
      p.send_keys(r"printf '\033]2;%s\033\\' '" + names[i] + "'")
      p.send_keys(commands[i])
      i = i + 1

  # connect to session
  session.attach_session()

except:
  session.kill_session()
  raise

else:
  session.kill_session()



